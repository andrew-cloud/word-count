{"version":3,"sources":["../app.js"],"names":["refreshGoal","goal","goal_input","value","valueAsNumber","refreshWords","words","words_input","refreshCount","count","count_characters","characterCount","count_words","wordCount","paragraphCount","s","replace","split","length","setToWords","count_paragraphs","refreshGoalDisplay","goalMetAlert","setToCharacters","setToParagraphs","calculatePercentage","percentage_complete","isGoalMet","console","log","checkmark","classList","remove","add","goalFirstClick","e","goal_clicked","this","select","unitButtonActive","removeActiveUnitButton","contains","list","document","getElementsByClassName","i","goal_display","innerHTML","refreshAll","autoExpand","hide","style","display","hideCounter","toggle","clearInput","refreshEntriesHeight","entries_container","setProperty","clientHeight","hideDiv","generateTeaser","teaser","substring","trim","generateID","modal_number","createEntry","newEntryCell","createElement","className","newEntryDiv","newEntryTitle","newEntryDate","newEntryTeaser","entries_container_inner","insertBefore","firstChild","appendChild","content","id","contentClose","setAttribute","contentCloseX","contentTitle","contentDate","contentGoal","contentBody","body","options","AnimationIn","AnimationOut","modal","Foundation","Reveal","$","foundation","getElementById","goal_display_container","save_button","entries","querySelectorAll","test_entry","close_entries_link","entries_container_height","addEventListener","field","height","computed","window","getComputedStyle","parseInt","getPropertyValue","scrollHeight"],"mappings":"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","file":"app-min.js","sourcesContent":["$(document).foundation();\n\n// VARIABLES\n\n\n// inputted words variable\nlet words = \"\";\n// word count variable\nlet count = 0;\n// goal variable\nlet goal = 250;\n// goal input\nlet goal_input = document.getElementById(\"goal-input\");\n// goal-display\nlet goal_display = document.getElementById(\"goal-display\");\n// has the goal input been clicked before?\nlet goal_clicked = false;\n// word input\nlet words_input = document.getElementById(\"words-input\");\n// character count boolean\nlet count_characters = false;\n// word count boolean, true by default\nlet count_words = true;\n// paragraph count boolean\nlet count_paragraphs = false;\n// percentage of goal complete\nlet percentage_complete = 0;\n// checkmark\nlet checkmark = document.getElementById(\"checkmark\");\n// goal-display with icon\nlet goal_display_container = document.getElementById(\"goal-display-container\");\n//save button\nlet save_button = document.getElementById(\"save-button\");\n// all entires\nvar entries = document.querySelectorAll('.entry');\n// entries container\nvar entries_container = document.getElementById(\"entries-container\");\n//entries-container-inner \nvar entries_container_inner = document.getElementById(\"entries-container-inner\");\n// test entry\nlet test_entry = document.getElementById(\"test-entry\");\n// close entries link\nlet close_entries_link = document.getElementById(\"close-entries-link\");\n// entries container height\nlet entries_container_height = entries_container.clientHeight;\n// body\nlet body = document.body;\n\n\n// gets goal number from input field\nfunction refreshGoal() {\n    if (goal_input.value == \"\") {\n        goal = 0;\n    } else {\n        goal = goal_input.valueAsNumber;\n    }\n}\n\n// gets inputted words form text area\nfunction refreshWords() {\n    words = words_input.value;\n}\n\n// refreshes word count\nfunction refreshCount() {\n    if (count_characters == true) {\n        count = characterCount(words);\n    } else if (count_words == true) {\n        count = wordCount(words);\n    } else {\n        count = paragraphCount(words);\n    }\n}\n\n// word count\nfunction wordCount(s) {\n    s = s.replace(/(^\\s*)|(\\s*$)/gi, \"\"); //exclude  start and end white-space\n    s = s.replace(/[ ]{2,}/gi, \" \"); // 2 or more spaces to 1\n    s = s.replace(/\\n /, \"\\n\"); // exclude newline with a start spacing\n    if (words == \"\") {\n        return 0;\n    } else {\n        return s.split(' ').length;\n    }\n}\n\n// character count\nfunction characterCount(s) {\n    s = s.replace(/\\s/g, \"\");\n    return s.length;\n}\n\n// paragraph count\nfunction paragraphCount(s) {\n    s = s.replace(/\\n$/gm, '');\n    if (words == \"\") {\n        return 0;\n    } else {\n        return s.split(/\\n/).length;\n    }\n}\n\n// set count to words\nfunction setToWords() {\n    count_words = true;\n    count_characters = false;\n    count_paragraphs = false;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// set count to characters\nfunction setToCharacters() {\n    count_words = false;\n    count_characters = true;\n    count_paragraphs = false;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// set count to paragraphs\nfunction setToParagraphs() {\n    count_words = false;\n    count_characters = false;\n    count_paragraphs = true;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// calculate percentage complete\nfunction calculatePercentage() {\n    percentage_complete = count / goal;\n}\n\n// checks to see if goal is met\nfunction isGoalMet() {\n    return (count >= goal);\n}\n\n// changes color of icon qhen goal is\nfunction goalMetAlert() {\n    if ((isGoalMet()) & (goal != 0)) {\n        console.log(\"Goal is met!\")\n        // have to run refreshCounter because the inner html has to be refreshed\n        refreshGoalDisplay();\n        checkmark.classList.remove(\"checkmark-unmet\");\n        checkmark.classList.add(\"checkmark-met\");\n    } else {\n        refreshGoalDisplay();\n        checkmark.classList.remove(\"checkmark-met\");\n        checkmark.classList.add(\"checkmark-unmet\");\n    }\n}\n\n// selects entire goal input field if it's the first click\nfunction goalFirstClick(e) {\n    if (goal_clicked == false) {\n        this.select();\n    }\n    goal_clicked = true;\n\n}\n\n// applies active class to unit buttons\nfunction unitButtonActive() {\n    removeActiveUnitButton();\n    if (this.classList.contains(\"active\")) {\n        this.classList.remove(\"active\");\n    } else this.classList.add(\"active\");\n}\n\n// remove active class from unit buttons\nfunction removeActiveUnitButton() {\n    var list = document.getElementsByClassName(\"active\");\n    var i;\n    for (i = 0; i < list.length; i++) {\n        list[i].classList.remove(\"active\");\n    }\n}\n\n\n\n// button click - set count to words\ndocument.getElementById(\"words-button\").addEventListener(\"click\", setToWords);\n\n// button click - set count to words\ndocument.getElementById(\"characters-button\").addEventListener(\"click\", setToCharacters);\n\n// button click - set count to words\ndocument.getElementById(\"paragraphs-button\").addEventListener(\"click\", setToParagraphs);\n\n\n\n// updates goal progress\nfunction refreshGoalDisplay() {\n    goal_display.innerHTML = `${count}/${goal}`;\n}\n\n// hides goal-display\ngoal_display.addEventListener(\"click\", hideCounter);\n\n// refreshes all values (inputted words, inputted goal, inputted goal display, and checks if goal is met)\nfunction refreshAll() {\n    refreshWords();\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n    autoExpand(words_input);\n}\n\n// refreshes values after input\ndocument.addEventListener(\"keyup\", refreshAll);\n\n// refreshed goal in goal-display when new amount is entered\ndocument.getElementById(\"goal-input\").addEventListener(\"input\", refreshGoal);\n\n// add comment\ngoal_input.addEventListener(\"click\", goalFirstClick);\n\n// adds active class to unit buttons\ndocument.getElementById(\"characters-button\").addEventListener(\"click\", unitButtonActive);\ndocument.getElementById(\"words-button\").addEventListener(\"click\", unitButtonActive);\ndocument.getElementById(\"paragraphs-button\").addEventListener(\"click\", unitButtonActive);\n\n// hide method\nfunction hide() {\n    if (this.style.display = \"block\") {\n        this.style.display = \"none\";\n    } else this.style.display = \"block\";\n}\n\n// hides counter\nfunction hideCounter() {\n    this.classList.toggle(\"goal-display-hidden\");\n}\n\n\n// auto-expands large input field as it gets filled\nlet autoExpand = function(field) {\n\n    // Reset field height\n    field.style.height = 'inherit';\n\n    // Get the computed styles for the element\n    var computed = window.getComputedStyle(field);\n\n    // Calculate the height\n    var height = parseInt(computed.getPropertyValue('border-top-width'), 10) +\n        parseInt(computed.getPropertyValue('padding-top'), 10) +\n        field.scrollHeight +\n        parseInt(computed.getPropertyValue('padding-bottom'), 10) +\n        parseInt(computed.getPropertyValue('border-bottom-width'), 10);\n\n    field.style.height = height + 'px';\n\n};\n\n// clears input and updates progress feedback after submission\nfunction clearInput() {\n    words_input.value = \"\";\n    refreshAll();\n\n}\n\n// ENTRIES\n\n// sets auto height of entry container to pixels, allowing for smooth transition\nentries_container.style.setProperty(\"--fullHeight\", entries_container.clientHeight + \"px\");\n\nfunction refreshEntriesHeight() {\n    entries_container.style.setProperty(\"--fullHeight\", \"auto\");\n    entries_container.style.setProperty(\"--fullHeight\", entries_container.clientHeight + \"px\");\n\n}\n// closes entries container\nclose_entries_link.addEventListener(\"click\", hideDiv);\n\nfunction hideDiv() {\n    if (entries_container.classList.contains(\"open-div\")) {\n        entries_container.classList.remove(\"open-div\");\n        entries_container.classList.add(\"closed-div\");\n    } else {\n        entries_container.classList.remove(\"closed-div\");\n        entries_container.classList.add(\"open-div\");\n    }\n}\n\n// creates a new entry card\nsave_button.addEventListener(\"click\", createEntry);\n\n// generates the content teaser for entry cards, first 55 characters\nfunction generateTeaser(s) {\n    let teaser = s.substring(0, 56) + \"...\";\n    teaser.trim();\n    return teaser;\n}\n\n// generates an ID for new modals\nlet modal_number = 0;\n\nfunction generateID() {\n    modal_number++;\n    let current_modal = `modal${modal_number}`;\n    return current_modal;\n}\n\n// creates all the elements for a new entry\nfunction createEntry() {\n    // creates the cell for the entry card\n    let newEntryCell = document.createElement(\"div\");\n    newEntryCell.className = \"large-3 medium-6 small-12 cell\";\n    // creates the entry div\n    let newEntryDiv = document.createElement(\"div\");\n    newEntryDiv.className = \"entry\";\n    // creates the entry title\n    let newEntryTitle = document.createElement(\"p\");\n    newEntryTitle.className = \"title\";\n    newEntryTitle.innerHTML = \"Title\";\n    // creates the entry date\n    let newEntryDate = document.createElement(\"p\");\n    newEntryDate.className = \"\";\n    newEntryDate.innerHTML = \"Jan 1, 18\";\n    // creates the entry teaser\n    let newEntryTeaser = document.createElement(\"p\");\n    newEntryTeaser.className = \"teaser\";\n    newEntryTeaser.innerHTML = generateTeaser(words);\n    // combines everything together and appends it to the entries container\n    entries_container_inner.insertBefore(newEntryCell, entries_container_inner.firstChild).appendChild(newEntryDiv).appendChild(newEntryTitle);\n    newEntryDiv.appendChild(newEntryDate);\n    newEntryDiv.appendChild(newEntryTeaser);\n    // creates the modal content\n    let content = document.createElement(\"div\");\n    content.innerHTML = words;\n    let id = generateID();\n    content.id = id;\n    content.className = \"reveal\";\n    // create 'close' button\n    let contentClose = document.createElement(\"button\");\n    contentClose.className = \"close-button\";\n    contentClose.setAttribute(\"data-close\", \"\");\n    contentClose.setAttribute(\"aria-label\", \"Close modal\");\n    contentClose.setAttribute(\"type\", \"button\");\n    // create 'x' for close button\n    let contentCloseX = document.createElement(\"span\");\n    contentCloseX.setAttribute(\"aria-hidden\", \"true\");\n    contentCloseX.innerHTML = \"×\";\n    // creates modal title\n    let contentTitle = document.createElement(\"p\");\n    contentTitle.className = \"content-title\";\n    contentTitle.innerHTML = \"This is the title.\";\n    // creates modal date\n    let contentDate = document.createElement(\"p\");\n    contentDate.className = \"content-date\";\n    contentDate.innerHTML = \"Jan 1st, 2018\";\n    // creates modal goal information\n    let contentGoal = document.createElement(\"p\");\n    contentGoal.className = \"content-goal\";\n    contentGoal.innerHTML = \"265/250 words icon-placeholder\";\n    // creates modal body information\n    let contentBody = document.createElement(\"p\");\n    contentBody.className = \"content-body\";\n    contentBody.innerHTML = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\";\n    // new elements have to be appended to something, in this case, the body\n    document.body.appendChild(content).appendChild(contentClose).appendChild(contentCloseX);\n    content.appendChild(contentTitle);\n    content.appendChild(contentDate);\n    content.appendChild(contentGoal);\n    content.appendChild(contentBody);\n\n\n    // options for newly generated modal\n    let options = {\n        AnimationIn: \"scaleIn\",\n        AnimationOut: \"scaleOut\"\n    };\n\n    let modal = new Foundation.Reveal($(`#${id}`), options);\n\n    // sets entry div to open newly generated modal\n    newEntryDiv.setAttribute(\"data-open\", id);\n    $(`#${id}`).foundation();\n\n    refreshEntriesHeight();\n    clearInput();\n}"]}