{"version":3,"sources":["../app.js"],"names":["refreshTitle","title","title_input","value","refreshGoal","goal","goal_input","valueAsNumber","refreshProject","project_name","project","options","selectedIndex","newProject","console","log","project_input","classList","remove","add","refreshNewProjectName","new_project_name","document","getElementById","goalFirstClick","e","goal_clicked","this","select","refreshWords","words","words_input","refreshCount","count","count_characters","characterCount","count_words","wordCount","paragraphCount","setToWords","count_paragraphs","refreshGoalDisplay","goalMetAlert","setToCharacters","setToParagraphs","s","unit","replace","split","length","unitButtonActive","removeActiveUnitButton","contains","list","getElementsByClassName","i","isGoalMet","checkmark","goal_display","innerHTML","hideCounter","toggle","refreshAll","autoExpand","hide","style","display","clearInput","refreshEntriesHeight","entries_container","setProperty","clientHeight","hideDiv","hide_icon","generateTeaser","teaser","substring","trim","generateID","modal_number","generateIcon","generateModalIcon","generateGoalClass","generateEntryBorder","generateProjectName","limitEntries","entries_list","querySelectorAll","modal_list","lastEntry","entries_container_inner","lastElementChild","removeChild","createEntry","$","foundation","newEntryCell","createElement","className","newEntryDiv","newEntryTitle","newEntryDate","newEntryTeaser","newEntryTag","insertBefore","firstChild","appendChild","content","id","contentClose","setAttribute","contentCloseX","contentTitle","contentDate","contentGoal","contentBody","body","AnimationIn","AnimationOut","modal","Foundation","Reveal","goal_display_container","save_button","entries","test_entry","close_entries_link","entries_container_height","maxEntries","modal_container","addEventListener","field","height","computed","window","getComputedStyle","parseInt","getPropertyValue","scrollHeight"],"mappings":"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","file":"app-min.js","sourcesContent":["$(document).foundation();\n\n// VARIABLES\n\n// inputted title\nlet title = \"\"\n// inputted words variable\nlet words = \"\";\n// word count variable\nlet count = 0;\n// goal variable\nlet goal = 250;\n// units\nlet unit = \"words\";\n// selected project\nlet project = document.getElementById('select-project');\n// selected project\nlet project_name = project.options[project.selectedIndex].innerHTML;\n// project title input\nlet project_input = document.getElementById('project-input');\n// new project title\nlet new_project_name = document.getElementById('project-input').value;\n// goal input\nlet goal_input = document.getElementById(\"goal-input\");\n// goal-display\nlet goal_display = document.getElementById(\"goal-display\");\n// has the goal input been clicked before?\nlet goal_clicked = false;\n// title input\nlet title_input = document.getElementById(\"title-input\");\n// word input\nlet words_input = document.getElementById(\"words-input\");\n// character count boolean\nlet count_characters = false;\n// word count boolean, true by default\nlet count_words = true;\n// paragraph count boolean\nlet count_paragraphs = false;\n// percentage of goal complete\nlet checkmark = document.getElementById(\"checkmark\");\n// goal-display with icon\nlet goal_display_container = document.getElementById(\"goal-display-container\");\n//save button\nlet save_button = document.getElementById(\"save-button\");\n// all entires\nvar entries = document.querySelectorAll('.entry');\n// entries container\nvar entries_container = document.getElementById(\"entries-container\");\n//entries-container-inner \nvar entries_container_inner = document.getElementById(\"entries-container-inner\");\n// test entry\nlet test_entry = document.getElementById(\"test-entry\");\n// close entries link\nlet close_entries_link = document.getElementById(\"close-entries-link\");\n// entries container height\nlet entries_container_height = entries_container.clientHeight;\n// maximum number of entry cards\nconst maxEntries = 12;\n// body\nlet body = document.body;\n// modal container\nlet modal_container = document.getElementById(\"modal-container\");\n// hide icon\nlet hide_icon = document.getElementById(\"hide-icon\");\n\n// EDITOR FUNCTIONALITY\n\n// gets inputted title\nfunction refreshTitle() {\n    title = title_input.value;\n}\n\n// gets goal number from input field\nfunction refreshGoal() {\n    if (goal_input.value == \"\") {\n        goal = 0;\n    } else {\n        goal = goal_input.valueAsNumber;\n    }\n}\n\n// refresh selected project\nfunction refreshProject() {\n    project_name = project.options[project.selectedIndex].value;\n    newProject();\n    console.log(project_name);\n}\n\n// display input field if starting new project\nfunction newProject() {\n    if (project_name == \"new\") {\n        project_input.classList.remove(\"display-none\");\n    } else {\n        project_input.classList.add(\"display-none\");\n    }\n}\n\nfunction refreshNewProjectName() {\n    new_project_name = document.getElementById('project-input').value;\n}\n\n// selects entire goal input field if it's the first click\nfunction goalFirstClick(e) {\n    if (goal_clicked == false) {\n        this.select();\n    }\n    goal_clicked = true;\n\n}\n\n// gets inputted words form text area\nfunction refreshWords() {\n    words = words_input.value;\n}\n\n// refreshes word count\nfunction refreshCount() {\n    if (count_characters == true) {\n        count = characterCount(words);\n    } else if (count_words == true) {\n        count = wordCount(words);\n    } else {\n        count = paragraphCount(words);\n    }\n}\n\n// sets count to words\nfunction setToWords() {\n    count_words = true;\n    count_characters = false;\n    count_paragraphs = false;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// sets count to characters\nfunction setToCharacters() {\n    count_words = false;\n    count_characters = true;\n    count_paragraphs = false;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// sets count to paragraphs\nfunction setToParagraphs() {\n    count_words = false;\n    count_characters = false;\n    count_paragraphs = true;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// determines word count\nfunction wordCount(s) {\n    unit = \"words\";\n    s = s.replace(/(^\\s*)|(\\s*$)/gi, \"\"); //exclude  start and end white-space\n    s = s.replace(/[ ]{2,}/gi, \" \"); // 2 or more spaces to 1\n    s = s.replace(/\\n /, \"\\n\"); // exclude newline with a start spacing\n    if (words == \"\") {\n        return 0;\n    } else {\n        return s.split(' ').length;\n    }\n}\n\n// determines character count\nfunction characterCount(s) {\n    unit = \"characters\";\n    s = s.replace(/\\s/g, \"\");\n    return s.length;\n}\n\n// determines paragraph count\nfunction paragraphCount(s) {\n    unit = \"paragraphs\";\n    s = s.replace(/\\n$/gm, '');\n    if (words == \"\") {\n        return 0;\n    } else {\n        return s.split(/\\n/).length;\n    }\n}\n\n// applies active class to unit buttons\nfunction unitButtonActive() {\n    removeActiveUnitButton();\n    if (this.classList.contains(\"active\")) {\n        this.classList.remove(\"active\");\n    } else this.classList.add(\"active\");\n}\n\n// remove active class from unit buttons\nfunction removeActiveUnitButton() {\n    var list = document.getElementsByClassName(\"active\");\n    var i;\n    for (i = 0; i < list.length; i++) {\n        list[i].classList.remove(\"active\");\n    }\n}\n\n// checks to see if goal is met\nfunction isGoalMet() {\n    return (count >= goal);\n}\n\n// changes color of icon when goal is\nfunction goalMetAlert() {\n    if ((isGoalMet()) & (goal != 0)) {\n        console.log(\"Goal is met!\")\n        // have to run refreshCounter because the inner html has to be refreshed\n        refreshGoalDisplay();\n        checkmark.classList.remove(\"checkmark-unmet\");\n        checkmark.classList.add(\"checkmark-met\");\n    } else {\n        refreshGoalDisplay();\n        checkmark.classList.remove(\"checkmark-met\");\n        checkmark.classList.add(\"checkmark-unmet\");\n    }\n}\n\n\n// get current project\nproject.addEventListener(\"input\", refreshProject);\n\n// button click - set count to words\ndocument.getElementById(\"words-button\").addEventListener(\"click\", setToWords);\n\n// button click - set count to words\ndocument.getElementById(\"characters-button\").addEventListener(\"click\", setToCharacters);\n\n// button click - set count to words\ndocument.getElementById(\"paragraphs-button\").addEventListener(\"click\", setToParagraphs);\n\n\n\n// updates goal progress\nfunction refreshGoalDisplay() {\n    goal_display.innerHTML = `${count}/${goal}`;\n}\n\n// hides counter\nfunction hideCounter() {\n    goal_display.classList.toggle(\"goal-display-hidden\");\n    checkmark.classList.toggle(\"checkmark-hidden\");\n}\n\n// hides goal-display\ngoal_display_container.addEventListener(\"click\", hideCounter);\n\n// refreshes all values (inputted words, inputted goal, inputted goal display, and checks if goal is met)\nfunction refreshAll() {\n    refreshWords();\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n    autoExpand(words_input);\n}\n\n// refreshes values after input\ndocument.addEventListener(\"keyup\", refreshAll);\n\n// refreshes title\ntitle_input.addEventListener(\"input\", refreshTitle);\n\n// refreshes new project name\nproject_input.addEventListener(\"input\", refreshNewProjectName);\n\n// refreshed goal in goal-display when new amount is entered\ndocument.getElementById(\"goal-input\").addEventListener(\"input\", refreshGoal);\n\n// highlights everything in goal input on first click\ngoal_input.addEventListener(\"click\", goalFirstClick);\n\n// adds active class to unit buttons\ndocument.getElementById(\"characters-button\").addEventListener(\"click\", unitButtonActive);\ndocument.getElementById(\"words-button\").addEventListener(\"click\", unitButtonActive);\ndocument.getElementById(\"paragraphs-button\").addEventListener(\"click\", unitButtonActive);\n\n// hide method\nfunction hide() {\n    if (this.style.display = \"block\") {\n        this.style.display = \"none\";\n    } else this.style.display = \"block\";\n}\n\n// auto-expands large input field as it gets filled\nlet autoExpand = function(field) {\n\n    // Reset field height\n    field.style.height = 'inherit';\n\n    // Get the computed styles for the element\n    var computed = window.getComputedStyle(field);\n\n    // Calculate the height\n    var height = parseInt(computed.getPropertyValue('border-top-width'), 10) +\n        parseInt(computed.getPropertyValue('padding-top'), 10) +\n        field.scrollHeight +\n        parseInt(computed.getPropertyValue('padding-bottom'), 10) +\n        parseInt(computed.getPropertyValue('border-bottom-width'), 10);\n\n    field.style.height = height + 'px';\n\n};\n\n// clears input and updates progress feedback after submission\nfunction clearInput() {\n    words_input.value = \"\";\n    refreshAll();\n\n}\n\n// ENTRIES\n\n// sets auto height of entry container to pixels, allowing for smooth transition\nentries_container.style.setProperty(\"--fullHeight\", entries_container.clientHeight + \"px\");\n\nfunction refreshEntriesHeight() {\n    entries_container.style.setProperty(\"--fullHeight\", \"auto\");\n    entries_container.style.setProperty(\"--fullHeight\", entries_container.clientHeight + \"px\");\n\n}\n// closes entries container\nclose_entries_link.addEventListener(\"click\", hideDiv);\n\nfunction hideDiv() {\n    if (entries_container.classList.contains(\"open-div\")) {\n        entries_container.classList.remove(\"open-div\");\n        entries_container.classList.add(\"closed-div\");\n        hide_icon.innerHTML = `<i class=\"fas fa-angle-up fa-lg\"></i>`\n    } else {\n        entries_container.classList.remove(\"closed-div\");\n        entries_container.classList.add(\"open-div\");\n        hide_icon.innerHTML = `<i class=\"fas fa-angle-down fa-lg\"></i>`\n    }\n}\n\n// creates a new entry card\nsave_button.addEventListener(\"click\", createEntry);\n\n// generates the content teaser for entry cards, first 55 characters\nfunction generateTeaser(s) {\n    if (s.length < 57) {\n        return s;\n    } else {\n        let teaser = s.substring(0, 56) + \"...\";\n        teaser.trim();\n        return teaser;\n    }\n}\n\n// generates an ID for new modals\nlet modal_number = 0;\n\nfunction generateID() {\n    modal_number++;\n    let current_modal = `modal${modal_number}`;\n    return current_modal;\n}\n\n// generates icon for new entry based on goal status\nfunction generateIcon() {\n    if (isGoalMet() == true) {\n        return `<i class=\"fas fa-check-circle\"></i>`;\n    } else {\n        return `<i class=\"fas fa-times-circle\"></i>`;\n\n    }\n}\n\n// generates modal icon based on goal status\nfunction generateModalIcon() {\n    if (isGoalMet() == true) {\n        return `<i class=\"fas fa-check-circle green\">`;\n    } else {\n        return `<i class=\"fas fa-times-circle red\">`;\n\n    }\n}\n\n// determines class for new entry based on goal status\nfunction generateGoalClass() {\n    if (isGoalMet() == true) {\n        return \"goal-met\";\n    } else {\n        return \"goal-unmet\";\n\n    }\n}\n\nfunction generateEntryBorder() {\n    if (isGoalMet() == true) {\n        return \"entry-met\";\n    } else {\n        return \"entry-unmet\";\n\n    }\n}\n\nfunction generateProjectName() {\n    if (project.options[project.selectedIndex].value == \"none\") {\n        return \"\";\n    }\n    if (project.options[project.selectedIndex].value == \"select\") {\n        return \"\";\n    }\n    if (project.options[project.selectedIndex].value == \"new\") {\n        refreshNewProjectName();\n        return ` - ${new_project_name}`;\n    } else {\n        return ` - ${project.options[project.selectedIndex].value}`;\n    }\n}\n\n\n// caps number of entries on editor page to twelve\nfunction limitEntries() {\n    let entries_list = document.querySelectorAll(\".entry\");\n    let modal_list = document.querySelectorAll(\".reveal\");\n    if (entries_list.length >= 13) {\n        let lastEntry = entries_container_inner.lastElementChild;\n        entries_container_inner.removeChild(lastEntry);\n        // let lastModal = modal_container.lastElementChild;\n        // modal_container.removeChild(lastModal);\n        refreshEntriesHeight();\n    } else {\n        return;\n    }\n    console.log(entries_list.length);\n}\n\n// resizes entry container when screen is resized\nwindow.addEventListener(\"resize\", refreshEntriesHeight);\n\n// creates all the elements for a new entry\nfunction createEntry() {\n    $('#new-entry').foundation('validateForm');\n    if ((title != \"\") && (words != \"\")) {\n\n        // creates the cell for the entry card\n        let newEntryCell = document.createElement(\"div\");\n        newEntryCell.className = \"large-4 medium-6 small-12 cell\";\n        // creates the entry div\n        let newEntryDiv = document.createElement(\"div\");\n        newEntryDiv.className = `entry ${generateEntryBorder()}`;\n        // creates the entry title\n        let newEntryTitle = document.createElement(\"p\");\n        newEntryTitle.className = \"title\";\n        newEntryTitle.innerHTML = title;\n        // creates the entry date\n        let newEntryDate = document.createElement(\"p\");\n        newEntryDate.className = \"date\";\n        newEntryDate.innerHTML = \"Jan 14th, 2018\";\n        // creates the entry teaser\n        let newEntryTeaser = document.createElement(\"p\");\n        newEntryTeaser.className = \"teaser\";\n        newEntryTeaser.innerHTML = generateTeaser(words);\n        // creates goal met/unmet tag\n        let newEntryTag = document.createElement(\"div\");\n        newEntryTag.className = generateGoalClass();\n        newEntryTag.innerHTML = `${count}/${goal} ${unit} ${generateIcon()}`;\n\n        // combines everything together and appends it to the entries container\n        entries_container_inner.insertBefore(newEntryCell, entries_container_inner.firstChild).appendChild(newEntryDiv).appendChild(newEntryTitle);\n        newEntryDiv.appendChild(newEntryDate);\n        newEntryDiv.appendChild(newEntryTeaser);\n        newEntryDiv.appendChild(newEntryTag);\n        // creates the modal content\n        let content = document.createElement(\"div\");\n        let id = generateID();\n        content.id = id;\n        content.className = \"reveal\";\n        // create 'close' button\n        let contentClose = document.createElement(\"button\");\n        contentClose.className = \"close-button\";\n        contentClose.setAttribute(\"data-close\", \"\");\n        contentClose.setAttribute(\"aria-label\", \"Close modal\");\n        contentClose.setAttribute(\"type\", \"button\");\n        // create 'x' for close button\n        let contentCloseX = document.createElement(\"span\");\n        contentCloseX.setAttribute(\"aria-hidden\", \"true\");\n        contentCloseX.innerHTML = \"×\";\n        // creates modal title\n        let contentTitle = document.createElement(\"p\");\n        contentTitle.className = \"content-title\";\n        contentTitle.innerHTML = title;\n        // creates modal date\n        let contentDate = document.createElement(\"p\");\n        contentDate.className = \"content-date\";\n        contentDate.innerHTML = `Jan 14th, 2018 ${generateProjectName()}`;\n        // creates modal goal information\n        let contentGoal = document.createElement(\"p\");\n        contentGoal.className = \"content-goal\";\n        contentGoal.innerHTML = `${count}/${goal} ${unit} ${generateModalIcon()}`;\n        // creates modal body information\n        let contentBody = document.createElement(\"p\");\n        contentBody.className = \"content-body\";\n        contentBody.innerHTML = words;\n        // new elements have to be appended to something, in this case, the body\n        body.appendChild(content).appendChild(contentClose).appendChild(contentCloseX);\n        content.appendChild(contentTitle);\n        content.appendChild(contentDate);\n        content.appendChild(contentBody);\n        content.appendChild(contentGoal);\n\n\n        // options for newly generated modal\n        let options = {\n            AnimationIn: \"scaleIn\",\n            AnimationOut: \"scaleOut\"\n        };\n\n        let modal = new Foundation.Reveal($(`#${id}`), options);\n\n        // sets entry div to open newly generated modal\n        newEntryDiv.setAttribute(\"data-open\", id);\n        // $(`#${id}`).foundation();\n\n        // $('#new-entry').foundation('validateForm');\n        console.log(\"hi\");\n        refreshEntriesHeight();\n        clearInput();\n        limitEntries();\n    }\n}\n\n// ENTRIES PAGE"]}