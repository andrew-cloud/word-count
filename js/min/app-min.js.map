{"version":3,"sources":["../app.js"],"names":["refreshGoal","goal","goal_input","value","valueAsNumber","refreshTitle","title","title_input","refreshWords","words","words_input","refreshCount","count","count_characters","characterCount","count_words","wordCount","paragraphCount","s","unit","replace","split","length","setToWords","count_paragraphs","refreshGoalDisplay","goalMetAlert","setToCharacters","setToParagraphs","calculatePercentage","percentage_complete","isGoalMet","console","log","checkmark","classList","remove","add","goalFirstClick","e","goal_clicked","this","select","unitButtonActive","removeActiveUnitButton","contains","list","document","getElementsByClassName","i","goal_display","innerHTML","refreshAll","autoExpand","hide","style","display","hideCounter","toggle","clearInput","refreshEntriesHeight","entries_container","setProperty","clientHeight","hideDiv","generateTeaser","teaser","substring","trim","generateID","modal_number","limitEntries","entries_list","querySelectorAll","entries_container_inner","removeChild","lastChild","maxEntries","createEntry","newEntryCell","createElement","className","newEntryDiv","newEntryTitle","newEntryDate","newEntryTeaser","insertBefore","firstChild","appendChild","content","id","contentClose","setAttribute","contentCloseX","contentTitle","contentDate","contentGoal","contentBody","body","options","AnimationIn","AnimationOut","modal","Foundation","Reveal","$","foundation","getElementById","goal_display_container","save_button","entries","test_entry","close_entries_link","entries_container_height","addEventListener","field","height","computed","window","getComputedStyle","parseInt","getPropertyValue","scrollHeight"],"mappings":"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","file":"app-min.js","sourcesContent":["$(document).foundation();\n\n// VARIABLES\n\n\n// inputted title\nlet title = \"\"\n// inputted words variable\nlet words = \"\";\n// word count variable\nlet count = 0;\n// goal variable\nlet goal = 250;\n// units\nlet unit = \"words\";\n// goal input\nlet goal_input = document.getElementById(\"goal-input\");\n// goal-display\nlet goal_display = document.getElementById(\"goal-display\");\n// has the goal input been clicked before?\nlet goal_clicked = false;\n// title input\nlet title_input = document.getElementById(\"title-input\");\n// word input\nlet words_input = document.getElementById(\"words-input\");\n// character count boolean\nlet count_characters = false;\n// word count boolean, true by default\nlet count_words = true;\n// paragraph count boolean\nlet count_paragraphs = false;\n// percentage of goal complete\nlet percentage_complete = 0;\n// checkmark\nlet checkmark = document.getElementById(\"checkmark\");\n// goal-display with icon\nlet goal_display_container = document.getElementById(\"goal-display-container\");\n//save button\nlet save_button = document.getElementById(\"save-button\");\n// all entires\nvar entries = document.querySelectorAll('.entry');\n// entries container\nvar entries_container = document.getElementById(\"entries-container\");\n//entries-container-inner \nvar entries_container_inner = document.getElementById(\"entries-container-inner\");\n// test entry\nlet test_entry = document.getElementById(\"test-entry\");\n// close entries link\nlet close_entries_link = document.getElementById(\"close-entries-link\");\n// entries container height\nlet entries_container_height = entries_container.clientHeight;\n// maximum number of entry cards\nconst maxEntries = 12;\n// body\nlet body = document.body;\n\n\n// gets goal number from input field\nfunction refreshGoal() {\n    if (goal_input.value == \"\") {\n        goal = 0;\n    } else {\n        goal = goal_input.valueAsNumber;\n    }\n}\n\n// gets inputted title\nfunction refreshTitle() {\n\ttitle = title_input.value;\n}\n\n// gets inputted words form text area\nfunction refreshWords() {\n    words = words_input.value;\n}\n\n// refreshes word count\nfunction refreshCount() {\n    if (count_characters == true) {\n        count = characterCount(words);\n    } else if (count_words == true) {\n        count = wordCount(words);\n    } else {\n        count = paragraphCount(words);\n    }\n}\n\n// word count\nfunction wordCount(s) {\n\tunit = \"words\";\n    s = s.replace(/(^\\s*)|(\\s*$)/gi, \"\"); //exclude  start and end white-space\n    s = s.replace(/[ ]{2,}/gi, \" \"); // 2 or more spaces to 1\n    s = s.replace(/\\n /, \"\\n\"); // exclude newline with a start spacing\n    if (words == \"\") {\n        return 0;\n    } else {\n        return s.split(' ').length;\n    }\n}\n\n// character count\nfunction characterCount(s) {\n\tunit = \"characters\";\n    s = s.replace(/\\s/g, \"\");\n    return s.length;\n}\n\n// paragraph count\nfunction paragraphCount(s) {\n\tunit = \"paragraphs\";\n    s = s.replace(/\\n$/gm, '');\n    if (words == \"\") {\n        return 0;\n    } else {\n        return s.split(/\\n/).length;\n    }\n}\n\n// set count to words\nfunction setToWords() {\n    count_words = true;\n    count_characters = false;\n    count_paragraphs = false;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// set count to characters\nfunction setToCharacters() {\n    count_words = false;\n    count_characters = true;\n    count_paragraphs = false;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// set count to paragraphs\nfunction setToParagraphs() {\n    count_words = false;\n    count_characters = false;\n    count_paragraphs = true;\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n}\n\n// calculate percentage complete\nfunction calculatePercentage() {\n    percentage_complete = count / goal;\n}\n\n// checks to see if goal is met\nfunction isGoalMet() {\n    return (count >= goal);\n}\n\n// changes color of icon qhen goal is\nfunction goalMetAlert() {\n    if ((isGoalMet()) & (goal != 0)) {\n        console.log(\"Goal is met!\")\n        // have to run refreshCounter because the inner html has to be refreshed\n        refreshGoalDisplay();\n        checkmark.classList.remove(\"checkmark-unmet\");\n        checkmark.classList.add(\"checkmark-met\");\n    } else {\n        refreshGoalDisplay();\n        checkmark.classList.remove(\"checkmark-met\");\n        checkmark.classList.add(\"checkmark-unmet\");\n    }\n}\n\n// selects entire goal input field if it's the first click\nfunction goalFirstClick(e) {\n    if (goal_clicked == false) {\n        this.select();\n    }\n    goal_clicked = true;\n\n}\n\n// applies active class to unit buttons\nfunction unitButtonActive() {\n    removeActiveUnitButton();\n    if (this.classList.contains(\"active\")) {\n        this.classList.remove(\"active\");\n    } else this.classList.add(\"active\");\n}\n\n// remove active class from unit buttons\nfunction removeActiveUnitButton() {\n    var list = document.getElementsByClassName(\"active\");\n    var i;\n    for (i = 0; i < list.length; i++) {\n        list[i].classList.remove(\"active\");\n    }\n}\n\n\n\n// button click - set count to words\ndocument.getElementById(\"words-button\").addEventListener(\"click\", setToWords);\n\n// button click - set count to words\ndocument.getElementById(\"characters-button\").addEventListener(\"click\", setToCharacters);\n\n// button click - set count to words\ndocument.getElementById(\"paragraphs-button\").addEventListener(\"click\", setToParagraphs);\n\n\n\n// updates goal progress\nfunction refreshGoalDisplay() {\n    goal_display.innerHTML = `${count}/${goal}`;\n}\n\n// hides goal-display\ngoal_display_container.addEventListener(\"click\", hideCounter);\n\n// refreshes all values (inputted words, inputted goal, inputted goal display, and checks if goal is met)\nfunction refreshAll() {\n    refreshWords();\n    refreshCount();\n    refreshGoalDisplay();\n    goalMetAlert();\n    autoExpand(words_input);\n}\n\n// refreshes values after input\ndocument.addEventListener(\"keyup\", refreshAll);\n\n// refreshes title\ntitle_input.addEventListener(\"input\", refreshTitle);\n\n// refreshed goal in goal-display when new amount is entered\ndocument.getElementById(\"goal-input\").addEventListener(\"input\", refreshGoal);\n\n// highlights everything in goal input on first click\ngoal_input.addEventListener(\"click\", goalFirstClick);\n\n// adds active class to unit buttons\ndocument.getElementById(\"characters-button\").addEventListener(\"click\", unitButtonActive);\ndocument.getElementById(\"words-button\").addEventListener(\"click\", unitButtonActive);\ndocument.getElementById(\"paragraphs-button\").addEventListener(\"click\", unitButtonActive);\n\n// hide method\nfunction hide() {\n    if (this.style.display = \"block\") {\n        this.style.display = \"none\";\n    } else this.style.display = \"block\";\n}\n\n// hides counter\nfunction hideCounter() {\n    goal_display.classList.toggle(\"goal-display-hidden\");\n    checkmark.classList.toggle(\"checkmark-hidden\");\n}\n\n\n// auto-expands large input field as it gets filled\nlet autoExpand = function(field) {\n\n    // Reset field height\n    field.style.height = 'inherit';\n\n    // Get the computed styles for the element\n    var computed = window.getComputedStyle(field);\n\n    // Calculate the height\n    var height = parseInt(computed.getPropertyValue('border-top-width'), 10) +\n        parseInt(computed.getPropertyValue('padding-top'), 10) +\n        field.scrollHeight +\n        parseInt(computed.getPropertyValue('padding-bottom'), 10) +\n        parseInt(computed.getPropertyValue('border-bottom-width'), 10);\n\n    field.style.height = height + 'px';\n\n};\n\n// clears input and updates progress feedback after submission\nfunction clearInput() {\n    words_input.value = \"\";\n    refreshAll();\n\n}\n\n// ENTRIES\n\n// sets auto height of entry container to pixels, allowing for smooth transition\nentries_container.style.setProperty(\"--fullHeight\", entries_container.clientHeight + \"px\");\n\nfunction refreshEntriesHeight() {\n    entries_container.style.setProperty(\"--fullHeight\", \"auto\");\n    entries_container.style.setProperty(\"--fullHeight\", entries_container.clientHeight + \"px\");\n\n}\n// closes entries container\nclose_entries_link.addEventListener(\"click\", hideDiv);\n\nfunction hideDiv() {\n    if (entries_container.classList.contains(\"open-div\")) {\n        entries_container.classList.remove(\"open-div\");\n        entries_container.classList.add(\"closed-div\");\n    } else {\n        entries_container.classList.remove(\"closed-div\");\n        entries_container.classList.add(\"open-div\");\n    }\n}\n\n// creates a new entry card\nsave_button.addEventListener(\"click\", createEntry);\n\n// generates the content teaser for entry cards, first 55 characters\nfunction generateTeaser(s) {\n    let teaser = s.substring(0, 56) + \"...\";\n    teaser.trim();\n    return teaser;\n}\n\n// generates an ID for new modals\nlet modal_number = 0;\nfunction generateID() {\n    modal_number++;\n    let current_modal = `modal${modal_number}`;\n    return current_modal;\n}\n\n// caps number of entries to twelve\nfunction limitEntries() {\n\tlet entries_list = document.querySelectorAll(\".entry\");\n\tif (entries_list.length == 12) {\n\t\tentries_container_inner.removeChild(entries_container_inner.lastChild);\n\t}\n\tconsole.log(entries_list.length);\n\tconsole.log(maxEntries);\n}\n\n// creates all the elements for a new entry\nfunction createEntry() {\n    // creates the cell for the entry card\n    let newEntryCell = document.createElement(\"div\");\n    newEntryCell.className = \"large-3 medium-6 small-12 cell\";\n    // creates the entry div\n    let newEntryDiv = document.createElement(\"div\");\n    newEntryDiv.className = \"entry\";\n    // creates the entry title\n    let newEntryTitle = document.createElement(\"p\");\n    newEntryTitle.className = \"title\";\n    newEntryTitle.innerHTML = \"Title\";\n    // creates the entry date\n    let newEntryDate = document.createElement(\"p\");\n    newEntryDate.className = \"\";\n    newEntryDate.innerHTML = \"Jan 1, 18\";\n    // creates the entry teaser\n    let newEntryTeaser = document.createElement(\"p\");\n    newEntryTeaser.className = \"teaser\";\n    newEntryTeaser.innerHTML = generateTeaser(words);\n    // combines everything together and appends it to the entries container\n    entries_container_inner.insertBefore(newEntryCell, entries_container_inner.firstChild).appendChild(newEntryDiv).appendChild(newEntryTitle);\n    newEntryDiv.appendChild(newEntryDate);\n    newEntryDiv.appendChild(newEntryTeaser);\n    // creates the modal content\n    let content = document.createElement(\"div\");\n    let id = generateID();\n    content.id = id;\n    content.className = \"reveal\";\n    // create 'close' button\n    let contentClose = document.createElement(\"button\");\n    contentClose.className = \"close-button\";\n    contentClose.setAttribute(\"data-close\", \"\");\n    contentClose.setAttribute(\"aria-label\", \"Close modal\");\n    contentClose.setAttribute(\"type\", \"button\");\n    // create 'x' for close button\n    let contentCloseX = document.createElement(\"span\");\n    contentCloseX.setAttribute(\"aria-hidden\", \"true\");\n    contentCloseX.innerHTML = \"×\";\n    // creates modal title\n    let contentTitle = document.createElement(\"p\");\n    contentTitle.className = \"content-title\";\n    contentTitle.innerHTML = title;\n    // creates modal date\n    let contentDate = document.createElement(\"p\");\n    contentDate.className = \"content-date\";\n    contentDate.innerHTML = \"Jan 1st, 2018\";\n    // creates modal goal information\n    let contentGoal = document.createElement(\"p\");\n    contentGoal.className = \"content-goal\";\n    contentGoal.innerHTML = `${count}/${goal} ${unit} icon-placeholder`;\n    // creates modal body information\n    let contentBody = document.createElement(\"p\");\n    contentBody.className = \"content-body\";\n    contentBody.innerHTML = words;\n    // new elements have to be appended to something, in this case, the body\n    document.body.appendChild(content).appendChild(contentClose).appendChild(contentCloseX);\n    content.appendChild(contentTitle);\n    content.appendChild(contentDate);\n    content.appendChild(contentGoal);\n    content.appendChild(contentBody);\n\n\n    // options for newly generated modal\n    let options = {\n        AnimationIn: \"scaleIn\",\n        AnimationOut: \"scaleOut\"\n    };\n\n    let modal = new Foundation.Reveal($(`#${id}`), options);\n\n    // sets entry div to open newly generated modal\n    newEntryDiv.setAttribute(\"data-open\", id);\n    // $(`#${id}`).foundation();\n\n    refreshEntriesHeight();\n    clearInput();\n    limitEntries()\n}"]}